#!/bin/sh

OLD_TIMEOUT=$TIMEOUT
OLD_QUIET=$QUIET
OLD_PORT=$PORT
OLD_HOST=$HOST

TIMEOUT=15
QUIET=0

if ! which nc >/dev/null; then
  echo "Netcat is not installed. This script requires netcat to work correctly."
  exit 1
fi

echoerr() {
  if [ "$QUIET" -ne 1 ]; then printf "%s\n" "$*" 1>&2; fi
}

usage() {
  exitcode="$1"
  cat << USAGE >&2
Usage:
  $(basename $0) host:port [-t timeout] [-- command args]
  -q | --quiet                        Do not output any status messages
  -s | --strict                       Only execute subcommand if the test succeeds
  -t TIMEOUT | --timeout=timeout      Timeout in seconds, zero for no timeout
  -- COMMAND ARGS                     Execute command with args after the test finishes
USAGE
  exit "$exitcode"
}

test_connection() {
  # force a 1-second timeout on darwin (https://stackoverflow.com/a/20460402/2063546)
  if [ -z "${$OSTYPE##*darwin*}" ] ; then
    nc -w 1 -G 1 "$1" "$2" > /dev/null 2>&1
  else
    nc -w 1 "$1" "$2" > /dev/null 2>&1
  fi
}

wait_for() {
  for i in `seq $TIMEOUT` ; do
    # use a 1-second timeout, but still sleep 0.1 seconds after just to be safe
    test_connection "$HOST" "$PORT"

    result=$?
    if [ $result -eq 0 ] ; then
      if [ $# -gt 0 ] ; then
        TIMEOUT=$OLD_TIMEOUT QUIET=$OLD_QUIET PORT=$OLD_PORT HOST=$OLD_HOST exec "$@"
      fi
      exit 0
    fi
    sleep 1
  done
  echo "Operation timed out" >&2
  if [ $result -ne 0 ] && [ $STRICT -ne 1 ] ; then
    if [ $# -gt 0 ] ; then
      exec "$@"
    fi
    exit 0
  fi
  exit 1
}

while [ $# -gt 0 ]
do
  case "$1" in
    *:* )
    HOST=$(printf "%s\n" "$1"| cut -d : -f 1)
    PORT=$(printf "%s\n" "$1"| cut -d : -f 2)
    shift 1
    ;;
    -q | --quiet)
    QUIET=1
    shift 1
    ;;
    -s | --strict)
    STRICT=1
    shift 1
    ;;
    -t)
    TIMEOUT="$2"
    if [ "$TIMEOUT" = "" ]; then break; fi
    shift 2
    ;;
    --timeout=*)
    TIMEOUT="${1#*=}"
    shift 1
    ;;
    --)
    shift
    break
    ;;
    --help)
    usage 0
    ;;
    *)
    echoerr "Unknown argument: $1"
    usage 1
    ;;
  esac
done

if [ "$HOST" = "" -o "$PORT" = "" ]; then
  echoerr "Error: you need to provide a host and port to test."
  usage 2
fi

STRICT=${STRICT:-0}

wait_for "$@"
